'''Suzuki Trotter Expansion'''

from typing import Tuple, List, Callable


Taskline = List[Tuple[int, float]]
"""Taskline type

A list of which task should do how long time sequentially
Example:
   [(1, 0.5), (1, 0.8), (2, 0.4)]

It means: do task 1 for 0.4s, do task 1 for 0.8s, do task 2 for 0.4s
"""

Pipeline = List[Callable[[float], Callable]]
"""Pipeline type [T1, T2, T3] for task type 1,2,3...

A list of task worker generator. A task worker is a function that do some task
for some time when called. A worker is generated by calling worker generator
with time. `w = T1(0.5)` generates a worker w for T1 that can do task 1 for
0.5s whenever you call `w()`.

Example:
We have task1 and task2, which provides [T1, T2]. For taskline
   [(1, 0.5), (2, 1), (1, 1), (2, 1), (1, 0.5)]
there are three types of tasks:
    t1 = (1, 0.5), t2=(2, 1), t3=(1, 1)
We generator task workers w1, w2, w3 for t1, t2, t3 by calling
    w1 = T1(0.5), w2 = T2(1), w3=T1(1)
Then when we call
    w1(), w2(), w3(), w2(), w1()
to do the actual tasks
"""


def streamline(tasks: Taskline) -> Taskline:
    """Merge nearing similar tasks.

    >>> streamline([(1, 0.5), (1, 0.8), (2, 0.4)])
    [(1, 1.2), (2, 0.4)]
    """
    L = len(tasks)
    i = -1
    for j in range(L):
        if tasks[i][0] == tasks[j][0] and j:
            tasks[i][1] += tasks[j][1]
        else:
            i += 1
            tasks[i] = tasks[j].copy()
    return [tuple(t) for t in tasks[:i+1]]


def do_tasks(tasks: Taskline, funs: Pipeline)->None:
    '''Streamline tasks, generate task workers, and finally work it out.'''
    tasks = streamline(tasks)
    ready = {t: funs[t[0]](t[1]) for t in set(tasks)}
    for task in tasks:
        ready[task]()


def ST1_tasks(L: int, n: int)->Taskline:
    '''First Order Suzuki Trotter Expansion

    Args
    ----
        L:
            Number of operators
        n:
            1/n is the step size of expansion
    Returns
    ---
        tasks: Taskline
    '''
    return [[i, 1./n] for i in range(L)]*n


def ST2_tasks(L: int, n: int)->Taskline:
    '''Second Order Suzuki Trotter Expansion

    Args
    ----
        L:int
            Number of operators
        n:int
            Number of time slices
    Returns
    ----
        tasks: Taskline
    '''
    l = [[i, 0.5/n] for i in range(L)]
    l += l[::-1]
    return l*n


def ST1(funs: Pipeline, n: int)->None:
    '''Do functions by ST1 expansion

    Args
    ----
        funs: Pipeline
        n: int
            Number of time slices
    '''
    do_tasks(ST1_tasks(len(funs), n), funs)


def ST2(funs: Pipeline, n: int)->None:
    '''Do functions by ST2 expansion

    Args
    ----
        funs: Pipeline
        n: int
            Number of time slices
    '''
    do_tasks(ST2_tasks(len(funs), n), funs)
