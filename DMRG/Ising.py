"""Ising Model Hamiltonian Generator

Tools to generate n-nearest interaction Hamiltonian.
"""
import numpy as np
import scipy.sparse as sps
from functools import reduce
from .spin import sigma


def dense_form(MPO, n):
    """Generate Hamiltonian from MPO

    Args
    ---
        MPO: np.ndarray
        n: int
            Chain length
    """
    start = np.zeros(MPO[0])
    start[0] = 1

    def add(l, m):
        L = len(l)
        return [np.sum([np.kron(l[j], m[j, i]) for j in range(i+1)]) for i in range(L)]
    return reduce(add, [start, *MPO])


def nearest(n, *ops, coef=1, sparse=False):
    """Generate k nearest Hamiltonian term
    $$\sum_{i=0}^{n-k} \bigotimes_{j=0}^{k-1} \Omega^k_{i+j}$$
    k is number of operators

    Args
    ----
    n: int
        length of chain
    ops: List[np.ndarray]
         Operator list
    coef: np.ndarray
        Coefficients of term at some site
    Examples
    ----
    n sites $\sum_i X_i$ can be generated by nearest(6, X)
    n sites $\sum_i X_iY_{i+1}$ can be generated by nearest(6, X, Y)
    """
    eye_n = np.eye(*ops[0].shape)
    coef *= np.ones(n)
    _kron = sps.kron if sparse else np.kron

    def _H_i(k):
        l = [eye_n for i in range(n)]
        for i, op in enumerate(ops):
            l[k + i] = op
        return reduce(_kron, l)
    return sum(coef[k] * _H_i(k) for k in range(n + 1 - len(ops)))


def Hamilton_trans(n, g=0, J=1):
    """Hamiltonian for Transverse field Ising Model

    :math:`H=-\sum_i J_i Z_i Z_{i+1} - \sum_i g_i X_i`

    Args
    ----
    J: np.ndarray
        Nearest Coupling Strength
    g: np.ndarray
        Transverse field strength

    Returns
    ---
        dict:
            + 'H' is actual Hamiltonian
            + 'H_template' is the Hamiltonian string
            + Input parameters are also in the dict
    """
    H_tpl = '$H=-\sum_i JZ_iZ_{i+1} - \sum_i gX_i$'

    H = -nearest(n, sigma[3], sigma[3], coef=J).astype('double')
    H -= nearest(n, sigma[1], coef=g)

    return {'H': H, 'H_template': H_tpl, 'n': n, 'J': J, 'g': g}


def Hamilton_XX(n, delta=1 / 2, g=1):
    """Hamiltonian for Ising Model with XX coupling

    :math:`H=-\sum_i (Z_i Z_{i+1}+\Delta X_i X_{i+1}) - \sum_i g_i X_i`

    Args
    ----
    delta: np.ndarray
        Nearest Coupling Strength for XX
    g: np.ndarray
        Transverse field strength

    Returns
    ---
        dict:
            + 'H' is actual Hamiltonian
            + 'H_template' is the Hamiltonian string
            + Input parameters are also in the dict
    """
    H_tpl = '$H=-\sum (Z_iZ_{i+1}+\Delta X_iX_{i+1})-\sum g_iX_i$'

    H = -nearest(n, sigma[1], coef=g).astype('double')
    H -= nearest(n, sigma[3], sigma[3])
    H -= nearest(n, sigma[1], sigma[1], coef=delta)

    return {'H': H, 'H_template': H_tpl, 'n': n, 'delta': delta, 'g': g}


def Hamilton_XZ(n, delta=1 / 2, g=1, h=0.1):
    H_tpl = '$H=-\sum (X_iX_j+Y_iY_j+\Delta Z_iZ_j)+\sum (gX_i+hZ_i)$'

    H = -nearest(n, sigma[1], sigma[1]).astype('complex128')
    H -= nearest(n, sigma[2], sigma[2])
    H -= nearest(n, sigma[3], sigma[3], coef=delta)
    H += nearest(n, sigma[1], coef=g)
    H += nearest(n, sigma[3], coef=h)

    return {'H': H, 'H_template': H_tpl, 'n': n, 'delta': delta, 'g': g, 'h': h}


def Hamilton_TL(n, J=1, g=0.945, h=0.8090):
    """Hamiltonian for Transverse field Ising model with Longitudinal field

    :math:`H=-\sum_i J_i Z_i Z_{i+1} - \sum_i (g_i X_i+h_i Z_i)`

    Args
    ----
    J: np.ndarray
        Nearest Coupling Strength
    g: np.ndarray
        Transverse field strength
    h: np.ndarray
        Longitudinal field
    Returns
    ---
        dict:
            + 'H' is actual Hamiltonian
            + 'H_template' is the Hamiltonian string
            + Input parameters are also in the dict
    """
    H_tpl = r'$H=-\sum J Z_iZ_{i+1}+\sum (gX_i+hZ_i)$'

    H = -nearest(n, sigma[3], sigma[3], coef=J).astype('double')
    H += nearest(n, sigma[1], coef=g)
    H += nearest(n, sigma[3], coef=h)

    return {'H': H, 'H_template': H_tpl, 'n': n, 'J': J, 'g': g, 'h': h}


if __name__ == '__main__':
    """Transverse field Ising model is an important test case for
    the generation of H and psi"""
    import scipy.linalg as la

    A = Hamilton_XX(4, delta=0.5, g=1)
    print(A['H_template'])
    print(*la.eigh(A['H']), sep='\n')
    print(Hamilton_TL(4))
